"use client";
import { useState, useRef } from "react";
import Head from "next/head";
import EstimationForm from "@/components/dashboard/EstimationForm";
import ResultsPanel from "@/components/dashboard/ResultPanel";
import DiePatternCanvas from "@/components/dashboard/shared/DiePatternCanvas";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { toast } from "sonner";

export default function Home() {
  // Current "results" object (null until user calculates)
  const [results, setResults] = useState(null);

  // Track next quote number
  const nextQuoteNumberRef = useRef(1);

  // Called by EstimationForm
  function handleCalculateEstimate(rawResults) {
    // Assign a new quoteNumber
    const quoteNumFormatted = `PE-${String(nextQuoteNumberRef.current).padStart(
      3,
      "0"
    )}`;
    nextQuoteNumberRef.current += 1;

    const fullResults = {
      ...rawResults,
      quoteNumber: quoteNumFormatted,
      paperType: rawResults.paperType || rawResults.paperType,
    };
    setResults(fullResults);

    // Save to localStorage for access in other pages
    localStorage.setItem("currentResults", JSON.stringify(fullResults));
  }

  // Called by ResultsPanel when user clicks "Save Quote"
  function handleSaveQuote(resultObj) {
    if (!resultObj) {
      toast.error("Please calculate an estimate first!");
      return;
    }
    const nowStr = new Date().toLocaleString();
    const newQuote = {
      id: Date.now(),
      quoteNumber: resultObj.quoteNumber,
      clientName: resultObj.clientName,
      jobType: resultObj.jobType,
      quantity: resultObj.itemsNeeded,
      totalCost: resultObj.costBreakdown.total,
      costPerItem: resultObj.costBreakdown.total / resultObj.itemsNeeded,
      itemsPerSheet: resultObj.itemsPerSheet,
      totalSheets: resultObj.totalSheets,
      efficiency: resultObj.matEff.efficiency,
      timestamp: nowStr,
      rushOrder: resultObj.rushOrder,
    };

    // Save to localStorage
    const existingQuotes = JSON.parse(
      localStorage.getItem("savedQuotes") || "[]"
    );
    const updatedQuotes = [newQuote, ...existingQuotes];
    localStorage.setItem("savedQuotes", JSON.stringify(updatedQuotes));

    toast.success("Quote saved successfully!");
  }

  async function handleExportPDF(resultObj) {
    if (!resultObj) {
      toast.success("Please calculate an estimate first!");
      return;
    }
  
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
  
    let y = 20;
  
    // --- HEADER ---
    doc.setFontSize(20);
    doc.setFont(undefined, "bold");
    doc.text("PRINTING ESTIMATE", pageWidth / 2, y, { align: "center" });
  
    y += 10;
    doc.setFontSize(11);
    doc.setFont(undefined, "normal");
    doc.text(`Quote #: ${resultObj.quoteNumber}`, 20, y);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth - 20, y, {
      align: "right",
    });
  
    y += 7;
    doc.text("Valid for 30 days", 20, y);
  
    // --- CLIENT INFO ---
    y += 10;
    doc.setFontSize(13);
    doc.setFont(undefined, "bold");
    doc.text("CLIENT INFO", 20, y);
  
    y += 7;
    doc.setFontSize(11);
    doc.setFont(undefined, "normal");
    doc.text(`Client Name: ${resultObj.clientName}`, 20, y);
    doc.text("Generated By: System Admin", 20, y + 6);
  
    // --- JOB SPECS ---
    y += 16;
    doc.setFontSize(13);
    doc.setFont(undefined, "bold");
    doc.text("JOB SPECS", 20, y);
  
    y += 7;
    const jobSpecs = [
      `Job Type: ${resultObj.jobType}`,
      `Quantity: ${resultObj.itemsNeeded.toLocaleString()} items`,
      `Item Size: ${resultObj.itemL}cm × ${resultObj.itemW}cm`,
      `Paper Type: ${resultObj.paperType || "N/A"}`,
      `Print Sides: ${resultObj.printSide || "Single Side"}`,
      `Priority: ${resultObj.rushOrder ? "Rush (1–2 days)" : "Standard (5–7 business days)"}`,
    ];
  
    jobSpecs.forEach((line, i) => {
      doc.text(line, 20, y + 7 + i * 6);
    });
  
    // --- PRODUCTION ANALYSIS ---
    y += jobSpecs.length * 6 + 14;
    doc.setFontSize(13);
    doc.setFont(undefined, "bold");
    doc.text("PRODUCTION ANALYSIS", 20, y);
  
    y += 7;
    const prod = resultObj.prodRes;
    const mat = resultObj.matEff;
    const analysis = [
      `Items per Sheet: ${resultObj.itemsPerSheet}`,
      `Total Sheets: ${resultObj.totalSheets}`,
      `Material Efficiency: ${mat.efficiency}%`,
      `Waste per Sheet: ${mat.wasteArea} cm²`,
      `Production Time: ${prod.hours}h (${prod.days} days)`,
      `Delivery: ${prod.delivery}`,
    ];
  
    analysis.forEach((line, i) => {
      doc.text(line, 20, y + 7 + i * 6);
    });
  
    // --- COST BREAKDOWN ---
    y += analysis.length * 6 + 14;
    doc.setFontSize(13);
    doc.setFont(undefined, "bold");
    doc.text("COST BREAKDOWN", 20, y);
  
    y += 7;
    doc.setFont(undefined, "normal");
    const cb = resultObj.costBreakdown;
    const costItems = [
      { label: "Base Cost", value: cb.baseCost },
      ...Object.entries(cb.additions).map(([label, val]) => ({
        label,
        value: val,
      })),
    ];
  
    if (cb.rushSurcharge > 0) {
      costItems.push({ label: "Rush Surcharge", value: cb.rushSurcharge });
    }
  
    costItems.push({ label: "Profit Margin (35%)", value: cb.profit });
  
    costItems.forEach((item, i) => {
      doc.text(`${item.label}:`, 20, y + i * 6);
      doc.text(`USD ${item.value.toFixed(2)}`, pageWidth - 20, y + i * 6, {
        align: "right",
      });
    });
  
    // --- TOTAL ESTIMATE ---
    y += costItems.length * 6 + 6;
    doc.setFont(undefined, "bold");
    doc.setFontSize(12);
    doc.setDrawColor(0);
    doc.line(20, y, pageWidth - 20, y);
  
    y += 10;
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text("TOTAL ESTIMATE:", 20, y);
    doc.text(`USD ${cb.total.toFixed(2)}`, pageWidth - 20, y, {
      align: "right",
    });
  
    // --- FOOTER ---
    y += 10;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(9);
    doc.setFont(undefined, "normal");
    doc.text(
      "This quote is valid for 30 days. Pricing subject to final approval.",
      20,
      y
    );
  
    // Download
    doc.save(`Estimate_${resultObj.quoteNumber}.pdf`);
    alert("Classic-style PDF downloaded!");
  }

  // Called by ResultsPanel when user clicks "Email Quote"
  function handleEmailQuote(resultObj) {
    if (!resultObj) {
      alert("Please calculate an estimate first!");
      return;
    }
    // Build `mailto:` link
    const quoteNum = resultObj.quoteNumber;
    const clientName = resultObj.clientName || "Valued Customer";
    const jobType = resultObj.jobType;
    const qty = resultObj.itemsNeeded;
    const totalCost = resultObj.costBreakdown.total.toFixed(2);
    const perItemCost = (resultObj.costBreakdown.total / qty).toFixed(3);
    const delivery = resultObj.prodRes.delivery;

    const subject = `Printing Quote ${quoteNum}`;
    const body =
      `Dear ${clientName},%0D%0A%0D%0APlease find below your printing estimate:%0D%0A%0D%0A` +
      `Job Type: ${jobType}%0D%0AQuantity: ${qty}%0D%0ATotal Cost: USD ${totalCost}%0D%0A` +
      `Cost per Item: USD ${perItemCost}%0D%0AEstimated Delivery: ${delivery}%0D%0A%0D%0A` +
      `This quote is valid for 30 days.%0D%0A%0D%0ABest regards,%0D%0AProfessional Printing Services`;
    window.location.href = `mailto:?subject=${encodeURIComponent(
      subject
    )}&body=${body}`;
  }

  // Function to handle "Go to Billing" button
  function handleGoToBilling() {
    if (!results) {
      alert("Please calculate an estimate first!");
      return;
    }
    // Results already saved to localStorage, redirect to billing page
    window.location.href = "/dashboard/billing";
  }

  function handleResetForm() {
    setResults(null);
    localStorage.removeItem("currentResults");
  }

  return (
    <>
      <Head>
        <title>Professional Printing Dashboard - Job Estimation</title>
        <meta
          name="description"
          content="Professional printing job estimation system."
        />
      </Head>

      <div className="min-h-screen p-4">
        <div className="max-w-7xl w-full mx-auto bg-white rounded-lg shadow-xl overflow-hidden">
          {/* Content Section */}
          <div className="p-8">
            <div className="w-full">
              {/* Estimation Form */}
              <EstimationForm
                onCalculate={handleCalculateEstimate}
                onGoToBilling={handleGoToBilling}
                hasResults={!!results}
                onReset={handleResetForm}
              />

              <div>
                <ResultsPanel
                  results={results}
                  onSaveQuote={handleSaveQuote}
                  onExportPDF={handleExportPDF}
                  onEmailQuote={handleEmailQuote}
                  onGoToBilling={handleGoToBilling}
                />

                {/* Only render DiePatternCanvas when results exist */}
                {results && (
                  <DiePatternCanvas
                    sheetLength={results.sheetL}
                    sheetWidth={results.sheetW}
                    itemLength={results.itemL}
                    itemWidth={results.itemW}
                    orientation={results.orientation}
                    efficiency={results.matEff?.efficiency}
                    itemsPerSheet={results.itemsPerSheet}
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
